{"version":3,"sources":["components/datepicker/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","selectRoot","padding","color","menuItemRoot","lineHeight","cache","allWeek","allMonth","allYear","allHour","allMinute","i","moment","year","push","DatePicker","props","title","placeholder","propsValue","value","format","onChange","classes","pickerRef","useRef","useState","open","setOpen","setValue","inputValue","setInputValue","currentYear","setCurrentYear","month","currentMonth","setCurrentMonth","hour","currentHour","setCurrentHour","minute","currentMinute","setCurrentMinute","weeks","days","daysOfYear","map","number","index","pre","thisMonth","day","Date","getDay","unshift","remDay","length","result","slice","daysInMonth","handleClick","useCallback","e","current","target","closest","useEffect","window","addEventListener","removeEventListener","isSame","changeValue","date","a","newValue","selectYear","Number","selectMonth","selectHour","selectMinute","nextYear","prevYear","nextMonth","preMonth","onPick","whichMonth","ref","className","onClick","TextField","fullWidth","label","variant","style","maxHeight","IconButton","size","ArrowBack","ChevronLeft","Select","native","root","key","ChevronRight","ArrowForward","week","wIdx","dIdx","active","backgroundColor","defaultProps","App","width","console","log","valueOf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b8c6b88b.chunk.js","sourcesContent":["import React, { useRef, useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport * as moment from 'moment'\nimport { makeStyles } from '@material-ui/styles';\nimport { TextField, Select, IconButton } from '@material-ui/core';\nimport { ArrowBack, ChevronLeft, ChevronRight, ArrowForward } from '@material-ui/icons';\nimport './index.css';\n\nconst useStyle = makeStyles({\n  selectRoot: {\n    padding: '6px',\n    color: 'rgba(0,0,0,.65)'\n  },\n  menuItemRoot: {\n    lineHeight: '1',\n  }\n})\n\nconst cache = {};\nconst allWeek = ['日', '一', '二', '三', '四', '五', '六'];\nconst allMonth = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst allYear = [], allHour = [], allMinute = [];\nfor (let i = 1970; i <= moment().year() + 5; i++) {\n  allYear.push(i);\n}\nfor (let i = 0; i < 24; i++) {\n  allHour.push(i);\n}\nfor (let i = 0; i < 60; i++) {\n  allMinute.push(i);\n}\nconst daysInMonth = (year) => {\n  if (cache[year]) return cache[year]\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) days[1] = 29\n\n  const daysOfYear = days.map((number, index) => {\n    let pre = days[index - 1]\n    if (index === 0) pre = days[11]\n    const thisMonth = []\n\n    let day = new Date(year, index, 1).getDay()\n\n    while (day--) thisMonth.unshift(pre--)\n    for (let i = 1; i <= number; i++) thisMonth.push(i)\n    let remDay = 42 - thisMonth.length, i = 1;\n    while (remDay--) thisMonth.push(i++)\n\n    const result = [];\n    for (let i = 0; i < thisMonth.length; i += 7) {\n      result.push(thisMonth.slice(i, i + 7));\n    }\n    return result;\n  })\n\n  cache[year] = daysOfYear\n  return daysOfYear\n}\n\n\nconst DatePicker = (props) => {\n  const\n    {\n      title,\n      placeholder,\n      value: propsValue,\n      format,\n      onChange,\n    } = props,\n    classes = useStyle(),\n    pickerRef = useRef(null),\n    [open, setOpen] = useState(false),\n    [value, setValue] = useState((moment.isMoment(propsValue) && propsValue) || moment()),\n    [inputValue, setInputValue] = useState((moment.isMoment(propsValue) && propsValue.format(format)) || ''),\n    [currentYear, setCurrentYear] = useState(() => value.year()),\n    [currentMonth, setCurrentMonth] = useState(() => value.month()),\n    [currentHour, setCurrentHour] = useState(() => value.hour()),\n    [currentMinute, setCurrentMinute] = useState(() => value.minute()),\n    weeks = daysInMonth(currentYear)[currentMonth];\n\n  const handleClick = useCallback((e) => {\n    if (pickerRef.current !== e.target.closest('.picker')) {\n      setOpen(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('click', handleClick);\n    return () => {\n      window.removeEventListener('click', handleClick);\n    }\n  }, [handleClick]);\n\n  useEffect(() => {\n    if (inputValue && !propsValue) {\n      onChange(value, inputValue);\n    }\n    if (inputValue && propsValue && !value.isSame(propsValue)) {\n      onChange(value, inputValue);\n    }\n  }, [inputValue]);\n\n  const changeValue = useCallback(async (year, month, date, hour, minute) => {\n    const newValue = moment([year, month, date, hour, minute]);\n    await setValue(newValue);\n    setInputValue(newValue.format(format));\n  }, [onChange, value]);\n  const selectYear = useCallback((e) => {\n    setCurrentYear(Number(e.target.value));\n  }, []);\n  const selectMonth = useCallback((e) => {\n    setCurrentMonth(Number(e.target.value));\n  }, []);\n  const selectHour = useCallback((e) => {\n    setCurrentHour(Number(e.target.value));\n    changeValue(currentYear, currentMonth, value.date(), e.target.value, currentMinute);\n  }, [currentMinute, currentMonth, currentYear, value]);\n  const selectMinute = useCallback((e) => {\n    setCurrentMinute(Number(e.target.value));\n    changeValue(currentYear, currentMonth, value.date(), currentHour, e.target.value);\n  }, [currentHour, currentMonth, currentYear, value]);\n  const nextYear = useCallback((date) => {\n    setCurrentYear(currentYear + 1);\n    if (date && typeof date === 'number') {\n      changeValue(currentYear + 1, 0, date);\n    }\n  }, [currentYear]);\n  const prevYear = useCallback((date) => {\n    setCurrentYear(currentYear - 1);\n    if (date && typeof date === 'number') {\n      changeValue(currentYear - 1, 11, date)\n    }\n  }, [currentYear]);\n  const nextMonth = useCallback((date) => {\n    if (currentMonth === 11) {\n      setCurrentMonth(0);\n      nextYear(date);\n    } else {\n      setCurrentMonth(currentMonth + 1);\n      if (date && typeof date === 'number') {\n        changeValue(currentYear, currentMonth + 1, date, currentHour, currentMinute);\n      }\n    }\n  }, [currentHour, currentMinute, currentMonth, currentYear, nextYear]);\n  const preMonth = useCallback((date) => {\n    if (currentMonth === 0) {\n      setCurrentMonth(11);\n      prevYear(date);\n    } else {\n      setCurrentMonth(currentMonth - 1);\n      if (date && typeof date === 'number') {\n        changeValue(currentYear, currentMonth - 1, date, currentHour, currentMinute);\n      }\n    }\n  }, [currentHour, currentMinute, currentMonth, currentYear, prevYear]);\n  const onPick = useCallback((date, whichMonth) => {\n    if (whichMonth !== 0) {\n      if (whichMonth === 1) {\n        nextMonth(date)\n      } else {\n        preMonth(date)\n      }\n    } else {\n      changeValue(currentYear, currentMonth, date, currentHour, currentMinute);\n    }\n    setOpen(true);\n  }, [currentHour, currentMinute, currentMonth, currentYear, nextMonth, preMonth]);\n  return (\n    <div ref={pickerRef} className='picker pos-rel'>\n      <div\n        className='pos-rel'\n        onClick={() => setOpen(true)}\n      >\n        <TextField\n          fullWidth\n          label={title}\n          placeholder={placeholder}\n          variant='outlined'\n          value={inputValue}\n        />\n      </div>\n      {\n        open ?\n          <div style={{ maxHeight: open ? '500px' : '0' }} className='datepicker'>\n            <div className='calendar'>\n              <div className='top'>\n                <div>\n                  <IconButton\n                    size='small'\n                    onClick={prevYear}\n                  >\n                    <ArrowBack />\n                  </IconButton>\n                  <IconButton\n                    size='small'\n                    onClick={preMonth}\n                  >\n                    <ChevronLeft />\n                  </IconButton>\n                </div>\n                <div className='select'>\n                  <Select\n                    native\n                    classes={{ root: classes.selectRoot }}\n                    value={currentYear}\n                    variant='outlined'\n                    onChange={selectYear}\n                  >\n                    {\n                      allYear.map((year, index) => {\n                        return (\n                          <option\n                            key={index}\n                            value={year}>{year}\n                          </option>\n                        )\n                      })\n                    }\n                  </Select>\n                  <Select\n                    native\n                    classes={{ root: classes.selectRoot }}\n                    value={currentMonth}\n                    variant='outlined'\n                    onChange={selectMonth}\n                  >\n                    {\n                      allMonth.map((month, index) => {\n                        return (\n                          <option\n                            key={index}\n                            value={index}\n                          >\n                            {month}\n                          </option>\n                        )\n                      })\n                    }\n                  </Select>\n                </div>\n                <div>\n                  <IconButton\n                    size='small'\n                    onClick={nextMonth}\n                  >\n                    <ChevronRight />\n                  </IconButton>\n                  <IconButton\n                    size='small'\n                    onClick={nextYear}\n                  >\n                    <ArrowForward />\n                  </IconButton>\n                </div>\n              </div>\n              <div className='weeks'>\n                {\n                  allWeek.map((week, index) => {\n                    return (\n                      <div key={index} className='text-box'>{week}</div>\n                    )\n                  })\n                }\n              </div>\n              {\n                weeks.map((week, wIdx) => {\n                  return (\n                    <div\n                      key={wIdx}\n                      className='dis-flex'\n                    >\n                      {\n                        week.map((day, dIdx) => {\n                          let whichMonth = 0\n                          let active = false\n                          if (day > 10 && wIdx < 1) whichMonth = -1\n                          if (day < 20 && wIdx > 3) whichMonth = 1\n                          if (\n                            whichMonth === 0 &&\n                            value.date() === day &&\n                            value.month() === currentMonth &&\n                            value.year() === currentYear\n                          ) active = true\n                          return (\n                            <div\n                              key={dIdx}\n                              style={{\n                                color: whichMonth === 0 ? 'rgba(0,0,0,.65)' : 'rgba(0,0,0,.25)'\n                              }}\n                              className='text-box cur-point'\n                              onClick={() => onPick(day, whichMonth)}\n                            >\n                              <div\n                                style={{\n                                  color: active ? 'white' : 'inherit',\n                                  backgroundColor: active ? '#108ee9' : ''\n                                }}\n                                className='text'\n                              >\n                                {day}\n                              </div>\n                            </div>\n                          )\n                        })\n                      }\n                    </div>\n                  )\n                })\n              }\n            </div>\n            <div className='time-picker'>\n              <Select\n                native\n                classes={{ root: classes.selectRoot }}\n                value={currentHour}\n                variant='outlined'\n                onChange={selectHour}\n              >\n                {\n                  allHour.map((hour, index) => {\n                    return (\n                      <option\n                        key={index}\n                        value={hour}\n                      >\n                        {`${hour < 10 ? '0' : ''}${hour}`}\n                      </option>\n                    )\n                  })\n                }\n              </Select>\n              <div className='colon'>:</div>\n              <Select\n                native\n                classes={{ root: classes.selectRoot }}\n                value={currentMinute}\n                variant='outlined'\n                onChange={selectMinute}\n              >\n                {\n                  allMinute.map((minute, index) => {\n                    return (\n                      <option\n                        key={index}\n                        value={minute}\n                      >\n                        {`${minute < 10 ? '0' : ''}${minute}`}\n                      </option>\n                    )\n                  })\n                }\n              </Select>\n            </div>\n          </div>\n          : null\n      }\n\n    </div>\n  )\n}\n\nDatePicker.propTypes = {\n  title: PropTypes.string,\n  format: PropTypes.string,\n  placeholder: PropTypes.string,\n  value: (props, propName, componentName) => {\n    if (props[propName] && !moment.isMoment(props[propName])) {\n      return new Error(`${propName} props需要 moment()實例`)\n    }\n  },\n  onChange: PropTypes.func,\n}\n\nDatePicker.defaultProps = {\n  title: '',\n  format: 'YYYY/MM/DD HH:mm',\n  placeholder: '',\n  value: null,\n  onChange: () => {},\n}\n\nexport default DatePicker;","import React from 'react';\nimport * as moment from 'moment'\nimport DatePicker from './components/datepicker';\n\nfunction App() {\n  return (\n    <div style={{ width: '100%', padding: '30px' }}>\n      <DatePicker\n        title={'帶Value 自訂日期'}\n        value={moment(1575129600000)}\n        onChange={(value, inputValue) => {\n          console.log('value: ', value.valueOf());\n          console.log('inputValue: ', inputValue);\n        }}\n      />\n      <DatePicker\n        title={'沒帶Value 預設今日'}\n        placeholder={'請選擇日期'}\n        onChange={(value, inputValue) => {\n          console.log('value: ', value.valueOf());\n          console.log('inputValue: ', inputValue);\n        }}\n      />\n      <DatePicker\n        title={'自訂format'}\n        format={'DD-MM-YYYY HH:mm'}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}